{
  "address": "0x92e04D680232dA68E1086B4D6E4a336533138324",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proofOfMatchAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_matchDataAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPresenceScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchDataContract",
      "outputs": [
        {
          "internalType": "contract IMatchData",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proofOfMatchContract",
      "outputs": [
        {
          "internalType": "contract IProofOfMatch",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x40508d0db8a6bf06e8e3a76c7a9049e2323831aa5c4909f7e54b7ef0466bb237",
  "receipt": {
    "to": null,
    "from": "0xf5Ac0b87325Bf1B3Eee525EB9646faFD69D2FedC",
    "contractAddress": "0x92e04D680232dA68E1086B4D6E4a336533138324",
    "transactionIndex": 2,
    "gasUsed": "423518",
    "logsBloom": "0x
    "blockHash": "0x14ed39775c431968f412deec590daaf051340eab2774ac43c8be199859b02e9d",
    "transactionHash": "0x40508d0db8a6bf06e8e3a76c7a9049e2323831aa5c4909f7e54b7ef0466bb237",
    "logs": [],
    "blockNumber": 195007296,
    "cumulativeGasUsed": "562027",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x88f9f78f8AD5Ac224ec48Fef7F345299e7411D14",
    "0x87DFa5646f097F52448A93f273AB835974d72643"
  ],
  "numDeployments": 1,
  "solcInputHash": "33cb716f3c7232314a0055ce24e358a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proofOfMatchAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_matchDataAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPresenceScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchDataContract\",\"outputs\":[{\"internalType\":\"contract IMatchData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofOfMatchContract\",\"outputs\":[{\"internalType\":\"contract IProofOfMatch\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"edsphinx\",\"details\":\"Lee datos de los contratos ProofOfMatch y MatchData para generar una puntuaci\\u00f3n de reputaci\\u00f3n social on-chain.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Al desplegar, se enlazan las direcciones de los contratos de los que depende.\"},\"getPresenceScore(address)\":{\"details\":\"Lee los tokens del usuario, obtiene los datos de cada match asociado y aplica una f\\u00f3rmula para generar una puntuaci\\u00f3n.\",\"params\":{\"user\":\"La direcci\\u00f3n de la wallet a consultar.\"},\"returns\":{\"_0\":\"score La Puntuaci\\u00f3n de Presencia calculada.\"}}},\"title\":\"Presence Protocol Score\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPresenceScore(address)\":{\"notice\":\"Calcula la Puntuaci\\u00f3n de Presencia para una direcci\\u00f3n de usuario.\"},\"matchDataContract()\":{\"notice\":\"La instancia del contrato IMatchData.\"},\"proofOfMatchContract()\":{\"notice\":\"La instancia del contrato IProofOfMatch.\"}},\"notice\":\"Contrato de solo lectura que calcula una \\\"Puntuaci\\u00f3n de Presencia\\\" para un usuario, sirviendo como un mecanismo de resistencia a Sybil.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sunny/PresenceScore.sol\":\"PresenceScore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Sunny/IMatchData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/**\\n * @title IMatchData Interface\\n * @author edsphinx\\n * @dev Define la interfaz para el contrato que almacena y gestiona los datos\\n * de los matches, como niveles e interacciones.\\n */\\ninterface IMatchData {\\n    /**\\n     * @dev Estructura que almacena toda la informaci\\u00f3n de un match.\\n     */\\n    struct Match {\\n        address userA;\\n        address userB;\\n        uint256 timestamp;\\n        string locationHint;\\n        uint8 level;\\n        uint16 interactionCount;\\n    }\\n\\n    /**\\n     * @notice Se emite cuando un match sube de nivel tras una nueva interacci\\u00f3n.\\n     * @param matchId El ID del match que fue actualizado.\\n     * @param newLevel El nuevo nivel alcanzado.\\n     */\\n    event MatchUpgraded(uint256 indexed matchId, uint8 newLevel);\\n\\n    /**\\n     * @notice Crea la entrada de datos inicial para un nuevo match.\\n     * @dev Debe ser llamado \\u00fanicamente por el contrato ProofOfMatch.\\n     * @param _matchId El ID \\u00fanico del match a crear.\\n     * @param _userA La direcci\\u00f3n del usuario A.\\n     * @param _userB La direcci\\u00f3n del usuario B.\\n     * @param _locationHint Una pista no sensible sobre la ubicaci\\u00f3n del match.\\n     */\\n    function createMatchEntry(uint256 _matchId, address _userA, address _userB, string memory _locationHint) external;\\n\\n    /**\\n     * @notice Registra una nueva interacci\\u00f3n para un match existente, potencialmente subi\\u00e9ndolo de nivel.\\n     * @dev Debe ser llamado \\u00fanicamente por el due\\u00f1o del protocolo (backend).\\n     * @param _matchId El ID del match a actualizar.\\n     */\\n    function recordInteraction(uint256 _matchId) external;\\n\\n    /**\\n     * @notice Obtiene todos los detalles de un match espec\\u00edfico.\\n     * @param _matchId El ID del match a consultar.\\n     * @return La estructura completa del Match con todos sus datos.\\n     */\\n    function getMatchDetails(uint256 _matchId) external view returns (Match memory);\\n}\\n\",\"keccak256\":\"0x15ffce546f611a9c2517fc2226bef85aa48dfbac39ef247c5a65152e431473b8\",\"license\":\"MIT\"},\"contracts/Sunny/IProofOfMatch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/**\\n * @title IProofOfMatch Interface\\n * @author edsphinx\\n * @dev Define la interfaz p\\u00fablica para el contrato ProofOfMatch.\\n * Establece las funciones y eventos necesarios para la interacci\\u00f3n\\n * con otros contratos como PresenceScore.\\n */\\ninterface IProofOfMatch {\\n    /**\\n     * @notice Se emite cuando se crea un nuevo match y se acu\\u00f1an los dos SBTs.\\n     * @param matchId El ID \\u00fanico para la relaci\\u00f3n/match.\\n     * @param tokenIdA El ID del token acu\\u00f1ado para el usuario A.\\n     * @param tokenIdB El ID del token acu\\u00f1ado para el usuario B.\\n     * @param userA La direcci\\u00f3n del usuario A.\\n     * @param userB La direcci\\u00f3n del usuario B.\\n     */\\n    event MatchCreated(uint256 indexed matchId, uint256 tokenIdA, uint256 tokenIdB, address userA, address userB);\\n\\n    /**\\n     * @notice Devuelve el ID del match asociado a un token espec\\u00edfico.\\n     * @param tokenId El ID del token a consultar.\\n     * @return El ID \\u00fanico del match.\\n     */\\n    function tokenToMatchId(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Devuelve un array con todos los IDs de los tokens que posee un usuario.\\n     * @param owner La direcci\\u00f3n del usuario.\\n     * @return Un array de token IDs.\\n     */\\n    function getTokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xe15b96bf2d7e250d6c5554a8fddd62aec2e0a1e8ba4b7f8ef31e8bced03e223a\",\"license\":\"MIT\"},\"contracts/Sunny/PresenceScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { IMatchData } from \\\"./IMatchData.sol\\\";\\nimport { IProofOfMatch } from \\\"./IProofOfMatch.sol\\\"; // Importamos el contrato, no una interfaz\\n\\n/**\\n * @title Presence Protocol Score\\n * @author edsphinx\\n * @notice Contrato de solo lectura que calcula una \\\"Puntuaci\\u00f3n de Presencia\\\"\\n * para un usuario, sirviendo como un mecanismo de resistencia a Sybil.\\n * @dev Lee datos de los contratos ProofOfMatch y MatchData para generar una\\n * puntuaci\\u00f3n de reputaci\\u00f3n social on-chain.\\n */\\ncontract PresenceScore {\\n    /**\\n     * @notice La instancia del contrato IProofOfMatch.\\n     */\\n    IProofOfMatch public proofOfMatchContract;\\n    /**\\n     * @notice La instancia del contrato IMatchData.\\n     */\\n    IMatchData public matchDataContract;\\n\\n    /**\\n     * @dev Al desplegar, se enlazan las direcciones de los contratos de los que depende.\\n     */\\n    constructor(address _proofOfMatchAddress, address _matchDataAddress) {\\n        proofOfMatchContract = IProofOfMatch(_proofOfMatchAddress);\\n        matchDataContract = IMatchData(_matchDataAddress);\\n    }\\n\\n    /**\\n     * @notice Calcula la Puntuaci\\u00f3n de Presencia para una direcci\\u00f3n de usuario.\\n     * @dev Lee los tokens del usuario, obtiene los datos de cada match asociado\\n     * y aplica una f\\u00f3rmula para generar una puntuaci\\u00f3n.\\n     * @param user La direcci\\u00f3n de la wallet a consultar.\\n     * @return score La Puntuaci\\u00f3n de Presencia calculada.\\n     */\\n    function getPresenceScore(address user) public view returns (uint256) {\\n        uint256 score = 0;\\n\\n        // 1. Obtenemos todos los tokens (SBTs) que posee el usuario\\n        uint256[] memory tokens = proofOfMatchContract.getTokensOfOwner(user);\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            // 2. Por cada token, obtenemos el ID del match al que pertenece\\n            uint256 matchId = proofOfMatchContract.tokenToMatchId(tokens[i]);\\n\\n            // 3. Obtenemos los detalles de ese match (incluyendo el nivel)\\n            IMatchData.Match memory currentMatch = matchDataContract.getMatchDetails(matchId);\\n\\n            // 4. Aplicamos la f\\u00f3rmula de puntuaci\\u00f3n\\n            if (currentMatch.level == 1) {\\n                score += 10;\\n            } else if (currentMatch.level == 2) {\\n                score += 25;\\n            } else if (currentMatch.level >= 3) {\\n                score += 50;\\n            }\\n        }\\n\\n        return score;\\n    }\\n}\\n\",\"keccak256\":\"0xe989abea9a659714af5154058c007928045d8431608dd9b9b0ef36608012740d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161068e38038061068e83398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b6105d0806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631a29a73a1461004657806347f6702c14610076578063d9c187f714610089575b600080fd5b600154610059906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600054610059906001600160a01b031681565b61009c6100973660046102bb565b6100aa565b60405190815260200161006d565b60008054604051635de6dc5560e01b81526001600160a01b03848116600483015283928392911690635de6dc5590602401600060405180830381865afa1580156100f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610120919081019061034f565b905060005b815181101561029a576000805483516001600160a01b039091169063fbd46dd190859085908110610158576101586103f5565b60200260200101516040518263ffffffff1660e01b815260040161017e91815260200190565b602060405180830381865afa15801561019b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bf919061040b565b6001546040516316fae89360e11b8152600481018390529192506000916001600160a01b0390911690632df5d12690602401600060405180830381865afa15801561020e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610236919081019061044c565b9050806080015160ff1660010361025957610252600a86610573565b9450610290565b806080015160ff1660020361027357610252601986610573565b6003816080015160ff16106102905761028d603286610573565b94505b5050600101610125565b50909392505050565b6001600160a01b03811681146102b857600080fd5b50565b6000602082840312156102cd57600080fd5b81356102d8816102a3565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610318576103186102df565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610347576103476102df565b604052919050565b6000602080838503121561036257600080fd5b825167ffffffffffffffff8082111561037a57600080fd5b818501915085601f83011261038e57600080fd5b8151818111156103a0576103a06102df565b8060051b91506103b184830161031e565b81815291830184019184810190888411156103cb57600080fd5b938501935b838510156103e9578451825293850193908501906103d0565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561041d57600080fd5b5051919050565b805160ff8116811461043557600080fd5b919050565b805161ffff8116811461043557600080fd5b6000602080838503121561045f57600080fd5b825167ffffffffffffffff8082111561047757600080fd5b9084019060c0828703121561048b57600080fd5b6104936102f5565b825161049e816102a3565b8152828401516104ad816102a3565b81850152604083810151908201526060830151828111156104cd57600080fd5b8301601f810188136104de57600080fd5b8051838111156104f0576104f06102df565b610502601f8201601f1916870161031e565b9350808452888682840101111561051857600080fd5b60005b8181101561053657828101870151858201880152860161051b565b506000868286010152505081606082015261055360808401610424565b608082015261056460a0840161043a565b60a08201529695505050505050565b8082018082111561059457634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122096ba6ae60186cdfa99c935afa38bb3315b71f02365ec5b4c0a6734ddef15e98a64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80631a29a73a1461004657806347f6702c14610076578063d9c187f714610089575b600080fd5b600154610059906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600054610059906001600160a01b031681565b61009c6100973660046102bb565b6100aa565b60405190815260200161006d565b60008054604051635de6dc5560e01b81526001600160a01b03848116600483015283928392911690635de6dc5590602401600060405180830381865afa1580156100f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610120919081019061034f565b905060005b815181101561029a576000805483516001600160a01b039091169063fbd46dd190859085908110610158576101586103f5565b60200260200101516040518263ffffffff1660e01b815260040161017e91815260200190565b602060405180830381865afa15801561019b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bf919061040b565b6001546040516316fae89360e11b8152600481018390529192506000916001600160a01b0390911690632df5d12690602401600060405180830381865afa15801561020e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610236919081019061044c565b9050806080015160ff1660010361025957610252600a86610573565b9450610290565b806080015160ff1660020361027357610252601986610573565b6003816080015160ff16106102905761028d603286610573565b94505b5050600101610125565b50909392505050565b6001600160a01b03811681146102b857600080fd5b50565b6000602082840312156102cd57600080fd5b81356102d8816102a3565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610318576103186102df565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610347576103476102df565b604052919050565b6000602080838503121561036257600080fd5b825167ffffffffffffffff8082111561037a57600080fd5b818501915085601f83011261038e57600080fd5b8151818111156103a0576103a06102df565b8060051b91506103b184830161031e565b81815291830184019184810190888411156103cb57600080fd5b938501935b838510156103e9578451825293850193908501906103d0565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561041d57600080fd5b5051919050565b805160ff8116811461043557600080fd5b919050565b805161ffff8116811461043557600080fd5b6000602080838503121561045f57600080fd5b825167ffffffffffffffff8082111561047757600080fd5b9084019060c0828703121561048b57600080fd5b6104936102f5565b825161049e816102a3565b8152828401516104ad816102a3565b81850152604083810151908201526060830151828111156104cd57600080fd5b8301601f810188136104de57600080fd5b8051838111156104f0576104f06102df565b610502601f8201601f1916870161031e565b9350808452888682840101111561051857600080fd5b60005b8181101561053657828101870151858201880152860161051b565b506000868286010152505081606082015261055360808401610424565b608082015261056460a0840161043a565b60a08201529695505050505050565b8082018082111561059457634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122096ba6ae60186cdfa99c935afa38bb3315b71f02365ec5b4c0a6734ddef15e98a64736f6c63430008180033",
  "devdoc": {
    "author": "edsphinx",
    "details": "Lee datos de los contratos ProofOfMatch y MatchData para generar una puntuación de reputación social on-chain.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Al desplegar, se enlazan las direcciones de los contratos de los que depende."
      },
      "getPresenceScore(address)": {
        "details": "Lee los tokens del usuario, obtiene los datos de cada match asociado y aplica una fórmula para generar una puntuación.",
        "params": {
          "user": "La dirección de la wallet a consultar."
        },
        "returns": {
          "_0": "score La Puntuación de Presencia calculada."
        }
      }
    },
    "title": "Presence Protocol Score",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPresenceScore(address)": {
        "notice": "Calcula la Puntuación de Presencia para una dirección de usuario."
      },
      "matchDataContract()": {
        "notice": "La instancia del contrato IMatchData."
      },
      "proofOfMatchContract()": {
        "notice": "La instancia del contrato IProofOfMatch."
      }
    },
    "notice": "Contrato de solo lectura que calcula una \"Puntuación de Presencia\" para un usuario, sirviendo como un mecanismo de resistencia a Sybil.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3683,
        "contract": "contracts/Sunny/PresenceScore.sol:PresenceScore",
        "label": "proofOfMatchContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IProofOfMatch)3500"
      },
      {
        "astId": 3687,
        "contract": "contracts/Sunny/PresenceScore.sol:PresenceScore",
        "label": "matchDataContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMatchData)3466"
      }
    ],
    "types": {
      "t_contract(IMatchData)3466": {
        "encoding": "inplace",
        "label": "contract IMatchData",
        "numberOfBytes": "20"
      },
      "t_contract(IProofOfMatch)3500": {
        "encoding": "inplace",
        "label": "contract IProofOfMatch",
        "numberOfBytes": "20"
      }
    }
  }
}